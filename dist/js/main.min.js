const scenes = Array.from(document.querySelectorAll(".scene"));
const slides = Array.from(document.querySelectorAll('section.slide'));
const buttons = Array.from(document.querySelectorAll('.button'));
const equipmentGraphics = document.querySelector('.equipment .graphics');
const glass = equipmentGraphics.querySelector('.glass');
const suit = equipmentGraphics.querySelector('.suit');
const equipmentDarkFilter = equipmentGraphics.querySelector('.dark-filter');
const equipmentInfo = document.querySelector('.equipment .info');
const outside = document.querySelector('section.outside .background');
const outsideDarkFilter = document.querySelector('section.outside .dark-filter');
const outsideInfo = document.querySelector('section.outside .info');
const outsideRocket = document.querySelector('section.outside .rocket');
const insideDarkFilter = document.querySelector('section.inside .dark-filter');
const insideInfo = document.querySelector('section.inside .info');
const buttonInfo = document.querySelector('section.inside .infos-button');
const stagesAnimation = document.querySelector('section.inside video');
const musics = document.querySelectorAll('.music audio');
const mute = document.querySelector('.mute');

const parallaxInstances = [];
let currentMusic = -1; // index

for (let i = 0; i < scenes.length; i++) {
  parallaxInstances[i] = new Parallax(scenes[i]);
  if (i > 0) {
    parallaxInstances[i].disable();
  }
}

let currentSlideIndex = 0;

const nextSlide = () => {
  nextMusic();
  if (currentSlideIndex >= 0) {
    slides[currentSlideIndex].classList.remove("fadein");
    slides[currentSlideIndex].classList.add("fadeout");
    parallaxInstances[currentSlideIndex].disable();
  }
  if (currentSlideIndex < slides.length - 1) {
    currentSlideIndex++;
  }
  slides[currentSlideIndex].classList.add("fadein");
  parallaxInstances[currentSlideIndex].enable();
  // Open suit protection
  if (currentSlideIndex == 2) {
    getSuit();
  } else if (currentSlideIndex == 3) {
    showRocket();
  }
};

const previousSlide = () => {
  previousMusic();
  if (currentSlideIndex == 4) {
    hideInfos();
  } else if (currentSlideIndex == 2) {
    removeSuit();
  } else if (currentSlideIndex == 3) {
    hideRocket();
  }
  if (currentSlideIndex > 0) {
    slides[currentSlideIndex].classList.remove('fadein');
    slides[currentSlideIndex].classList.add('fadeout');
    parallaxInstances[currentSlideIndex].disable();
    currentSlideIndex--;
    slides[currentSlideIndex].classList.remove('fadeout');
    slides[currentSlideIndex].classList.add('fadein');
    parallaxInstances[currentSlideIndex].enable();
  }
};

const nextMusic = () => {
  currentMusic++;
  musics[currentMusic].play();
  if (currentMusic > 0) {
    musics[currentMusic - 1].pause();
    musics[currentMusic - 1].currentTime = 0;
  }
};

const previousMusic = () => {
  if (currentMusic > 0) {
    musics[currentMusic].pause();
    musics[currentMusic].currentTime = 0;
    currentMusic--;
    musics[currentMusic].play();
  }
};

const getSuit = () => {
  window.setTimeout(() => {
    glass.classList.add("reveal");
  }, 2000);
  window.setTimeout(() => {
    suit.classList.add("expand");
  }, 4000);
  window.setTimeout(() => {
    equipmentGraphics.classList.add('travel');
    equipmentInfo.classList.add('reveal');
    equipmentDarkFilter.classList.add('visible');
  }, 5000);
};

const removeSuit = () => {
  glass.classList.remove("reveal");
  suit.classList.remove("expand");
  equipmentGraphics.classList.remove('travel');
  equipmentInfo.classList.remove('reveal');
  equipmentDarkFilter.classList.remove("visible");
};

const showRocket = () => {
  outside.classList.add('move');
  window.setTimeout(() => {
    outsideDarkFilter.classList.add('visible');
  }, 9000);
  window.setTimeout(() => {
    outsideInfo.classList.add('visible');
    outsideRocket.classList.add('reveal');
  }, 10000);
  window.setTimeout(() => {
    outsideRocket.classList.add("splice");
  }, 11000);
};

const hideRocket = () => {
  outside.classList.remove("move");
  outsideDarkFilter.classList.remove("visible");
  outsideInfo.classList.remove("visible");
  outsideRocket.classList.remove("reveal");
  outsideRocket.classList.remove("splice");
};

const showInfos = () => {
  insideDarkFilter.classList.add('visible');
  insideInfo.classList.add('visible');
  stagesAnimation.classList.add('visible');
  window.setTimeout(() => {
    stagesAnimation.play();
  }, 1000);
};

const hideInfos = () => {
  insideDarkFilter.classList.remove('visible');
  insideInfo.classList.remove('visible');
  stagesAnimation.classList.remove("visible");
  stagesAnimation.pause();
  stagesAnimation.currentTime = 0;
};

const toggleMute = () => {
  if (musics[0].classList.contains('toggled')) {
    for (const music of musics) {
      music.volume = 1;
      music.classList.remove('toggled');
      mute.innerHTML = "Mute";
    }
  } else {
    for (const music of musics) {
      music.volume = 0;
      music.classList.add('toggled');
      mute.innerHTML = 'Turn on sound';
    }
  }
};

document.addEventListener('keydown', event => {
  switch (event.keyCode) {
    // Left arrow
    case 37:
      previousSlide();
      break;
    // Right arrow
    case 39:
      nextSlide();
      break;
    // Spacebar
    case 32:
      nextSlide();
      break;
  }
});

for (const button of buttons) {
  button.addEventListener('click', nextSlide);
}

buttonInfo.addEventListener('click', showInfos);

mute.addEventListener('click', toggleMute);

// Start playing music on load
nextMusic();
const mouseTracker = document.querySelector(".mouse-tracker");
const mousePos = { x: 0, y: 0 };
const trackerPos = { x: 0, y: 0 };

const trackerSettings = {
  width: 20,
  height: 20,
  speed: 0.125
};

const moveTracker = (x, y) => {
  mouseTracker.style.transform = `translate(${x}px, ${y}px)`;
};

const loopMouse = () => {
  window.requestAnimationFrame(loopMouse);
  trackerPos.x += (mousePos.x - trackerPos.x) * trackerSettings.speed;
  trackerPos.y += (mousePos.y - trackerPos.y) * trackerSettings.speed;
  moveTracker(trackerPos.x, trackerPos.y);
};

loopMouse();

let dots = [],
    mouse = {
  x: 0,
  y: 0
};

let Dot = function () {
  this.x = 0;
  this.y = 0;
  this.node = function () {
    let n = document.createElement("div");
    n.className = "trail";
    document.body.appendChild(n);
    return n;
  }();
};

Dot.prototype.draw = function () {
  this.node.style.transform = `translate(${this.x}px, ${this.y}px)`;
};

for (let i = 0; i < 12; i++) {
  let d = new Dot();
  dots.push(d);
}

const drawMouse = () => {
  let x = mouse.x,
      y = mouse.y;

  dots.forEach(function (dot, index, dots) {
    let nextDot = dots[index + 1] || dots[0];

    dot.x = x;
    dot.y = y;
    dot.draw();
    x += (nextDot.x - dot.x) * 0.6;
    y += (nextDot.y - dot.y) * 0.6;
  });
};

addEventListener("mousemove", event => {
  mouse.x = event.pageX;
  mouse.y = event.pageY;
});

const animate = () => {
  drawMouse();
  requestAnimationFrame(animate);
};

animate();
const canvas = document.querySelector('.stars-bg');
const ctx = canvas.getContext('2d');
const centerPoint = {};
let stars = [];
let frameCount = 0;

const resize = () => {
  // Resize canvas
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  centerPoint.x = canvas.width / 2, centerPoint.y = canvas.height / 2;

  // Reset canvas content
  clear();
  stars = [];
  for (let i = 0; i < 400; i++) {
    createStar();
  }
};

const createStar = () => {
  const star = {};
  star.x = canvas.width * Math.random();
  star.y = canvas.height * Math.random();
  star.distance = getDistance(star.x, star.y, centerPoint.x, centerPoint.y);
  star.random = Math.random();
  // Get angle between star and canvas center
  star.angle = Math.atan2(star.y - centerPoint.y, star.x - centerPoint.x);
  star.color = "#FFFDE7";
  star.radius = star.random * star.distance / 500;
  star.speed = Math.random() * 0.7;

  stars.push(star);
};

const moveStars = () => {
  let i = 0;
  for (const star of stars) {
    star.x += Math.cos(star.angle) * star.speed;
    star.y += Math.sin(star.angle) * star.speed;
    if (star.x < 0 || star.x > canvas.width || star.y < 0 || star.y > canvas.height) {
      // Delete elements out of canvas
      stars.splice(i, 1);
    }
    // Increase stars size when they get closer
    star.distance = getDistance(star.x, star.y, centerPoint.x, centerPoint.y);
    star.radius = star.random * star.distance / 500;
    i++;
  }
};

const draw = () => {
  for (const star of stars) {
    ctx.beginPath();
    ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
    ctx.fillStyle = star.color;
    ctx.fill();
  }
};

const clear = () => {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
};

const loop = () => {
  frameCount++;
  requestAnimationFrame(loop);

  // Create star every 20 frames
  if (frameCount % 20 == 0) {
    createStar();
  }
  moveStars();
  clear();
  draw();
};

const getDistance = (x0, y0, x1, y1) => {
  // Using Pythagore
  const differenceX = x0 - x1;
  const differenceY = y0 - y1;
  return Math.sqrt(Math.pow(differenceX, 2) + Math.pow(differenceY, 2));
};

resize();
loop();

window.addEventListener('resize', resize);